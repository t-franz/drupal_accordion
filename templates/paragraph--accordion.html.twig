{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}


{# https://www.aditus.io/patterns/accordion/ #}
{# https://akinolaakeem.com/develop-accordion-menu/ #}

{% set styles = ['accordion flex'] %}
{% set textstyles = [] %}

{% if paragraph.field_paragraph_styles.0 %}
    {% for key, item in paragraph.field_paragraph_styles if key|first != '#' %}
      {% set styles = styles|merge([item.value]) %}
    {% endfor %}
{% endif %}

{% if paragraph.field_paragraph_css.0  %}
  {% set textstyles = [
    paragraph.field_paragraph_css.value
  ] %}
{% endif %}

{% set classes = styles|merge(textstyles) %}

{% block paragraph %}
<div {{attributes.addClass(classes) }}>
    {% block content %}
    {% for key,value in paragraph.field_paragraph_accordion.value %}
      <div class="accordion-item">
        <h4 class="accordion-title">
          <button id="accordion-header-{{paragraph.id()}}-{{key}}" aria-expanded="false" aria-controls="accordion-panel-{{paragraph.id()}}-{{key}}" class="accordion-button">
            {{ paragraph.field_paragraph_accordion[key].entity.field_paragraph_accordion_title.value|raw }}
            <i focusable="false" aria-hidden="true" class="accordion-icon">
              <svg width="19" height="12" viewBox="0 0 37.1 24" xmlns="http://www.w3.org/2000/svg"><path d="m30.4 0-11.8 17.5-11.9-17.5h-6.7l16.3 24h4.6l16.2-24z"/></svg>
            </i>
          </button>
        </h4>
        <div id="accordion-panel-{{paragraph.id()}}-{{key}}" class="accordion-content" aria-labelledby="accordion-header-{{paragraph.id()}}-{{key}}">
          {{ paragraph.field_paragraph_accordion[key].entity.field_paragraph_accordion_desc.value|raw }}
        </div>
     </div>
    {% endfor %}
    {% endblock %}
</div>
{% endblock paragraph %}

